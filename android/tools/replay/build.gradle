apply plugin: 'com.android.application'

android {
    compileSdkVersion 33
    ndkVersion '21.3.6528147'
    defaultConfig {
        applicationId "com.lunarg.gfxreconstruct.replay"
        minSdkVersion 26
        targetSdkVersion 33
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs "libs"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation project(':layer')
}

task prepareArtifactFolders {
    mkdir "../../layer/build/intermediates/cmake/release/obj"
}

task runNdkBuild(type: Exec) {
    dependsOn prepareArtifactFolders

    def ndkDir = android.ndkDirectory
    def maxParallelForks = Runtime.runtime.availableProcessors()

    def ndkDebug
    if (gradle.startParameter.taskNames.contains("assembleRelease")) {
          ndkDebug = 0
    }

    if (gradle.startParameter.taskNames.contains("assembleDebug")) {
          ndkDebug = 1
    }

    executable = "$ndkDir/ndk-build"
    args = ["-j$maxParallelForks",
            "GFXRECON_SOURCE_DIR:=..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "NDK_DEBUG=${ndkDebug}",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj",
            "NDK_LIBS_OUT=${projectDir}/libs"]
}

task runNdkCleanDebug(type: Exec) {
    def ndkDir = android.ndkDirectory
    executable = "$ndkDir/ndk-build"
    args = ["GFXRECON_SOURCE_DIR:=..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "NDK_DEBUG=1",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj",
            "NDK_LIBS_OUT=${projectDir}/libs",
            "clean"]
}

task runNdkCleanRelease(type: Exec) {
    def ndkDir = android.ndkDirectory
    executable = "$ndkDir/ndk-build"
    args = ["GFXRECON_SOURCE_DIR:=..",
            "GFXRECON_INCLUDE_DIR:=../../..",
            "NDK_DEBUG=0",
            "APP_BUILD_SCRIPT=../../jni/Android.mk",
            "NDK_APPLICATION_MK=../../jni/Application.mk",
            "NDK_OUT=${projectDir}/obj",
            "NDK_LIBS_OUT=${projectDir}/libs",
            "clean"]
}

task copySoArtifacts {
    dependsOn runNdkBuild

    doLast{
        def build
        if (gradle.startParameter.taskNames.contains("assembleRelease")) {
            build = "release"
        }

        if (gradle.startParameter.taskNames.contains("assembleDebug")) {
            build = "debug"
        }

        copy {
            from "libs"
            into "../../layer/build/intermediates/cmake/release/obj"
        }
    }
}

preBuild {
    dependsOn copySoArtifacts
}

afterEvaluate {
    clean.finalizedBy { runNdkCleanRelease }
    clean.finalizedBy { runNdkCleanDebug }
}
